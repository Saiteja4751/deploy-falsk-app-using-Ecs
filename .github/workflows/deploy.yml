name: Deploy Flask App to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPO: flask-ecs-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID
      run: |
        echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

    - name: Ensure ECR Repo Exists
      run: |
        if ! aws ecr describe-repositories --repository-names $ECR_REPO > /dev/null 2>&1; then
          echo "üì¶ Creating ECR repo: $ECR_REPO"
          aws ecr create-repository --repository-name $ECR_REPO
        else
          echo "‚úÖ ECR Repo $ECR_REPO already exists."
        fi

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init
      working-directory: .

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: .

    - name: Log in to ECR
      run: |
        aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com

    - name: Build and Push Docker Image
      run: |
        docker build -t $ECR_REPO .
        docker tag $ECR_REPO:latest $AWS_ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPO:latest
        docker push $AWS_ACCOUNT_ID.dkr.ecr.${AWS_REGION}.amazonaws.com/$ECR_REPO:latest

    - name: Force ECS Service Redeploy
      run: |
        aws ecs update-service \
          --cluster ${ECR_REPO}-cluster \
          --service ${ECR_REPO}-service \
          --force-new-deployment

    - name: Get Public IP of ECS App
      run: |
        CLUSTER_NAME="${ECR_REPO}-cluster"
        SERVICE_NAME="${ECR_REPO}-service"

        echo "‚è≥ Waiting for ECS task to start..."
        for i in {1..10}; do
          TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query "taskArns[0]" --output text)
          if [[ "$TASK_ARN" != "None" && "$TASK_ARN" != "" ]]; then
            break
          fi
          sleep 10
        done

        ENI_ID=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN \
          --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" --output text)

        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID \
          --query "NetworkInterfaces[0].Association.PublicIp" --output text)

        echo "üîó Your Flask App is live at: http://$PUBLIC_IP:5000"

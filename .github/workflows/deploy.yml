name: Deploy Flask App to ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: us-east-1
  ECR_REPO: flask-ecs-app

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Get AWS Account ID
      run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_ENV

    - name: Set up Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform Init
      run: terraform init
      working-directory: terraform

    - name: Terraform Apply
      run: terraform apply -auto-approve
      working-directory: terraform

    - name: Login to ECR
      run: |
        aws ecr get-login-password | docker login --username AWS \
        --password-stdin ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

    - name: Build and Tag Docker Image
      run: |
        docker build -t $ECR_REPO .
        docker tag $ECR_REPO:latest ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO:latest

    - name: Push Docker Image to ECR
      run: |
        docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/$ECR_REPO:latest

    - name: Force ECS Service Redeploy
      run: |
        CLUSTER_NAME="${ECR_REPO}-cluster"
        SERVICE_NAME="${ECR_REPO}-service"

        echo "üîç Checking if ECS service $SERVICE_NAME exists in cluster $CLUSTER_NAME..."
        SERVICE_EXISTS=$(aws ecs describe-services \
          --cluster $CLUSTER_NAME \
          --services $SERVICE_NAME \
          --query "services[0].status" \
          --output text 2>/dev/null || echo "NOT_FOUND")

        if [ "$SERVICE_EXISTS" = "ACTIVE" ]; then
          echo "‚úÖ ECS service found. Triggering force deployment..."
          aws ecs update-service \
            --cluster $CLUSTER_NAME \
            --service $SERVICE_NAME \
            --force-new-deployment
        else
          echo "‚ùå ECS service $SERVICE_NAME not found in $CLUSTER_NAME. Skipping redeploy."
          exit 1
        fi

    - name: Wait for ECS Service to Stabilize
      run: |
        aws ecs wait services-stable \
          --cluster ${ECR_REPO}-cluster \
          --services ${ECR_REPO}-service

    - name: Get Public IP of Running ECS Task
      run: |
        CLUSTER_NAME="${ECR_REPO}-cluster"
        SERVICE_NAME="${ECR_REPO}-service"
        for i in {1..10}; do
          TASK_ARN=$(aws ecs list-tasks --cluster $CLUSTER_NAME --service-name $SERVICE_NAME --query "taskArns[0]" --output text)
          if [[ "$TASK_ARN" != "None" && "$TASK_ARN" != "" ]]; then
            echo "‚úÖ Task started: $TASK_ARN"
            break
          fi
          sleep 10
        done
        if [[ -z "$TASK_ARN" || "$TASK_ARN" == "None" ]]; then
          echo "‚ùå ECS task not found."
          exit 1
        fi
        ENI_ID=$(aws ecs describe-tasks --cluster $CLUSTER_NAME --tasks $TASK_ARN \
          --query "tasks[0].attachments[0].details[?name=='networkInterfaceId'].value" --output text)
        PUBLIC_IP=$(aws ec2 describe-network-interfaces --network-interface-ids $ENI_ID \
          --query "NetworkInterfaces[0].Association.PublicIp" --output text)
        echo "üîó App is live at: http://$PUBLIC_IP:5000"
